// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.1 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// APIError defines model for APIError.
type APIError struct {
	// Error message
	Message string `json:"message"`
}

// CreatedItem defines model for CreatedItem.
type CreatedItem struct {
	// New ID of created object
	Id string `json:"id"`
}

// User defines model for User.
type User struct {
	// Date of user creation
	CreatedAt time.Time `json:"created_at"`

	// Email of user
	Email string `json:"email"`

	// ID of user
	Id string `json:"id"`

	// Date of user update
	UpdatedAt time.Time `json:"updated_at"`

	// Username
	Username string `json:"username"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// Maximum number of users to return
	Limit *int64 `json:"limit,omitempty"`

	// Number of users to skip
	Offset *int64 `json:"offset,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /user)
	GetUser(c *gin.Context, params GetUserParams)

	// (POST /user)
	PostUser(c *gin.Context)

	// (DELETE /user/{id})
	DeleteUserId(c *gin.Context, id string)

	// (GET /user/{id})
	GetUserId(c *gin.Context, id string)

	// (PUT /user/{id})
	PutUserId(c *gin.Context, id string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetUser operation middleware
func (siw *ServerInterfaceWrapper) GetUser(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetUserParams

	// ------------- Optional query parameter "limit" -------------
	if paramValue := c.Query("limit"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter limit: %s", err)})
		return
	}

	// ------------- Optional query parameter "offset" -------------
	if paramValue := c.Query("offset"); paramValue != "" {

	}

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter offset: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUser(c, params)
}

// PostUser operation middleware
func (siw *ServerInterfaceWrapper) PostUser(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostUser(c)
}

// DeleteUserId operation middleware
func (siw *ServerInterfaceWrapper) DeleteUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteUserId(c, id)
}

// GetUserId operation middleware
func (siw *ServerInterfaceWrapper) GetUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetUserId(c, id)
}

// PutUserId operation middleware
func (siw *ServerInterfaceWrapper) PutUserId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PutUserId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/user", wrapper.GetUser)

	router.POST(options.BaseURL+"/user", wrapper.PostUser)

	router.DELETE(options.BaseURL+"/user/:id", wrapper.DeleteUserId)

	router.GET(options.BaseURL+"/user/:id", wrapper.GetUserId)

	router.PUT(options.BaseURL+"/user/:id", wrapper.PutUserId)

	return router
}
